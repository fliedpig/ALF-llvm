#!/usr/bin/env ruby
# Smoke test for the ALF backend
require 'fileutils'
class FileName
  def initialize(file)
    @mod = file.sub(/\.[^.]+$/,'') # strip last extension
    @file = file
  end
  def [](ext)
    @mod + "." + ext
  end
  def to_s
    @file
  end
end
require 'erb'
require 'ostruct'

entries = []
ARGV.each do |file|

  f = FileName.new(file)
  print("#{f.to_s.ljust(25)}")

  llc_opts="-march=alf -alf-standalone -alf-memory-areas=0x00-0xff"
  if File.exist? f['c']
    llc_opts += " -alf-map-file=#{f['map']}"
  end
  compile = "llc #{llc_opts} -o #{f['alf']} #{f}"
  unless system("#{compile} >#{f['cclog']} 2>&1")
    puts "Build failed"
    next
  end
  check = "sweet -i=#{f['alf']} -c"
  unless system("#{check} >#{f['checklog']} 2>&1")
    puts "Check failed"
    next
  end
  opts="-i=#{f['alf']}"
  if File.exist? f['in']
    opts << " annot=#{f['in']}"
  else
    opts << " annot=arg.in"
  end
  if File.exist? f['obs']
    opts << " outannot=#{f['obs']}"
  end
  ae = "sweet #{opts} -ae debug=trace"
  unless system("#{ae} >#{f['aelog']} 2>&1")
    puts "AE failed #{f['aelog']}"
    next
  end
  FileUtils.mv('debug_msgs.txt',f['aetrace'])
  if File.exist?(f['out'])
    puts File.readlines(f['out'])
  else
    puts File.readlines(f['aetrace'])[-1]
  end
  entry = OpenStruct.new
  entry.name = f['ll'].sub(/.ll/,'')
  entry.links = []
  entry.links.push(OpenStruct.new(:name => 'LLcode', :href=>f['ll']))
  entry.links.push(OpenStruct.new(:name => 'ALFcode', :href=>f['alf']))
  if(File.exist? f['c'])
    entry.links.push(OpenStruct.new(:name => 'Ccode', :href=>f['c']))
    entry.links.push(OpenStruct.new(:name => 'Mapping', :href=>f['map']))
  end
  entries.push(entry)
end
template = ERB.new(File.read('index.html.erb'))
File.open('index.html','w') { |fh| fh.puts template.result(binding) }


